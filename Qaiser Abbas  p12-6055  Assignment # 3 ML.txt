# Name:     Qaiser Abbas
# Roll no:  p12-6055
# Subject:  Machine Learning
# Assignment #3

import numpy as np

# X = (Total hrs of Sleeping, Total hrs of Studying), y = score on test
X = np.array(([3, 8], [2, 6], [2, 5]), dtype=float)
y = np.array(([93], [87], [90]), dtype=float)

# scaling the units
X = X/np.amax(X, axis=0) 
y = y/100 # maximum text score is 100

class Neural_Network(object):
    
  def __init__(self):
    
    self.input_size = 2
    self.output_size = 1
    self.hidden_size = 3

    #weights
    self.weight1 = np.random.randn(self.input_size, self.hidden_size) 
    self.weight2 = np.random.randn(self.hidden_size, self.output_size) 

  def forward_pass(self, X):
    
    self.z = np.dot(X, self.weight1)
    self.z2 = self.sig_fun(self.z) 
    self.z3 = np.dot(self.z2, self.weight2)
    output = self.sig_fun(self.z3)
    return output 

  def sig_fun(self, z):
    
    return 1/(1+np.exp(-z))

  def sig_deriv(self, z):
    
    return z * (1 - z)

  def backward_pass(self, X, y, output):
    
    self.output_error = y - output # error in output
    self.output_delta = self.output_error*self.sig_deriv(output) # applying derivative of sig_fun to error

    self.z2_error = self.output_delta.dot(self.weight2.T) 
    self.z2_delta = self.z2_error*self.sig_deriv(self.z2) 

    self.weight1 += X.T.dot(self.z2_delta)
    self.weight2 += self.z2.T.dot(self.output_delta) 

  def train (self, X, y):
    
    output = self.forward_pass(X)
    self.backward_pass(X, y, output)

NeuralNet = Neural_Network()
for epochs in range(200): 
  print("Input: \n" + str(X))
  print("Real Output: \n" + str(y)) 
  print("Output Prediction: \n" + str(NeuralNet.forward_pass(X)) )
  print("Cost: \n" + str(np.mean(np.square(y - NeuralNet.forward_pass(X))))) # mean squared loss
  print("\n")
  NeuralNet.train(X, y)